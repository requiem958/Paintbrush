#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = -Iincludes
CFLAGS = -Wnon-virtual-dtor -Wshadow -Winit-self -Wredundant-decls -Wcast-align -Wundef -Wfloat-equal -Winline -Wunreachable-code -Wmissing-declarations -Wmissing-include-dirs -Wswitch-default -Weffc++ -Wmain -pedantic-errors -pedantic -Wfatal-errors -Wextra -Wall -ansi `sd2l-config --cflags`
RESINC = 
LIBDIR = -Llibs -L/lib64 -L/lib/x86_64-linux-gnu
LIB = 
LDFLAGS = -lSDL2 -lSDL2_image -lSDL2_gfx -lconfig
SRC = src

INC_DEBUG = $(INC)
SRC_DEBUG = $(SRC)
CFLAGS_DEBUG = $(CFLAGS)
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = bin/Debug/Paintbrush

INC_RELEASE = $(INC)
SRC_RELEASE = $(SRC)
CFLAGS_RELEASE = $(CFLAGS)
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS)
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/Paintbrush

OBJ_DEBUG = $(OBJDIR_DEBUG)/quit.o $(OBJDIR_DEBUG)/players.o $(OBJDIR_DEBUG)/painters.o $(OBJDIR_DEBUG)/main.o $(OBJDIR_DEBUG)/inits.o $(OBJDIR_DEBUG)/game_fonctions.o $(OBJDIR_DEBUG)/fonctions.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/quit.o $(OBJDIR_RELEASE)/players.o $(OBJDIR_RELEASE)/painters.o $(OBJDIR_RELEASE)/main.o $(OBJDIR_RELEASE)/inits.o $(OBJDIR_RELEASE)/game_fonctions.o $(OBJDIR_RELEASE)/fonctions.o

all: debug release

clean: clean_debug clean_release

before_debug: 
	test -d bin/Debug || mkdir -p bin/Debug
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/quit.o: $(SRC_DEBUG)/quit.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $(SRC_DEBUG)/quit.c -o $(OBJDIR_DEBUG)/quit.o

$(OBJDIR_DEBUG)/players.o: players.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c players.c -o $(OBJDIR_DEBUG)/players.o

$(OBJDIR_DEBUG)/painters.o: painters.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c painters.c -o $(OBJDIR_DEBUG)/painters.o

$(OBJDIR_DEBUG)/main.o: main.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c main.c -o $(OBJDIR_DEBUG)/main.o

$(OBJDIR_DEBUG)/inits.o: inits.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c inits.c -o $(OBJDIR_DEBUG)/inits.o

$(OBJDIR_DEBUG)/game_fonctions.o: game_fonctions.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c game_fonctions.c -o $(OBJDIR_DEBUG)/game_fonctions.o

$(OBJDIR_DEBUG)/fonctions.o: fonctions.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c fonctions.c -o $(OBJDIR_DEBUG)/fonctions.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf bin/Debug
	rm -rf $(OBJDIR_DEBUG)

before_release: 
	test -d bin/Release || mkdir -p bin/Release
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/quit.o: quit.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c quit.c -o $(OBJDIR_RELEASE)/quit.o

$(OBJDIR_RELEASE)/players.o: players.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c players.c -o $(OBJDIR_RELEASE)/players.o

$(OBJDIR_RELEASE)/painters.o: painters.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c painters.c -o $(OBJDIR_RELEASE)/painters.o

$(OBJDIR_RELEASE)/main.o: main.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c main.c -o $(OBJDIR_RELEASE)/main.o

$(OBJDIR_RELEASE)/inits.o: inits.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c inits.c -o $(OBJDIR_RELEASE)/inits.o

$(OBJDIR_RELEASE)/game_fonctions.o: game_fonctions.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c game_fonctions.c -o $(OBJDIR_RELEASE)/game_fonctions.o

$(OBJDIR_RELEASE)/fonctions.o: fonctions.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c fonctions.c -o $(OBJDIR_RELEASE)/fonctions.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf bin/Release
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

